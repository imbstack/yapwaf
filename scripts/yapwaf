#!/usr/bin/python
"""
General purpose scripts for all tasks associated with a YAPWAF app.
"""
import os
import argparse
import shutil


env_str = """\

\"\"\"
Configuring the environment for the YAPWAF app.
Server configuration takes place in conf/wsgi.py
\"\"\"
from os import environ

name = %s

# Path for all static assets.  Everything beneath this will be served before
# getting to the YAPWAF app itself.
asset_path = 'public'

if environ.get('Y_PROD'):
    # DO stuff here if production environment is different
    pass
"""

route_str = """\

\"\"\"
A simple list of endpoints that will be matched in order.

Each entry is a tuple with
1. A regex to match incoming requests against.  Special notation is used to
   represent arguments.
2. The path for the YAPWAF controller that handles this request.
\"\"\"

routes = []
"""

wsgi_str = """\
\"\"\"
gunicorn server configuration
\"\"\"
import multiprocessing
from os import environ
import sys

sys.path.insert(0,'hello')

bind = environ.get('BIND','0.0.0.0') + ':' + environ.get('PORT', '8000')
workers = multiprocessing.cpu_count() * 2 + 1
preload = True
"""


def in_yap_proj():
    """Return True if in YAPWAF project, False otherwise"""
    return os.path.exists('app')


def gen_project(args):
    if os.path.exists(args.name):
        prompt = """\
                This will squash everything beneath %s, are you sure you wish \
                to continue? [Yn]""" % (args.name,)
        yn = raw_input(prompt)
        if yn != 'Y':
            print 'Exiting...'
            exit()
        shutil.rmtree(args.name)

    os.mkdir(args.name)
    os.mkdir(os.path.join(args.name, 'app'))
    os.mkdir(os.path.join(args.name, 'app', 'controllers'))
    os.mkdir(os.path.join(args.name, 'app', 'models'))
    os.mkdir(os.path.join(args.name, 'app', 'views'))
    os.mkdir(os.path.join(args.name, 'conf'))
    os.mkdir(os.path.join(args.name, 'public'))
    os.mkdir(os.path.join(args.name, 'public', 'js'))
    os.mkdir(os.path.join(args.name, 'public', 'css'))
    os.mkdir(os.path.join(args.name, 'tests'))

    with open(os.path.join(args.name, 'app', 'views', 'layout.tmpl'), 'w') as f:
        f.close()
    with open(os.path.join(args.name, 'conf', 'env.py'), 'w') as f:
        f.write(env_str % (args.name,))
        f.close()
    with open(os.path.join(args.name, 'conf', 'db.py'), 'w') as f:
        f.close()
    with open(os.path.join(args.name, 'conf', 'routes.py'), 'w') as f:
        f.write(route_str)
        f.close()
    with open(os.path.join(args.name, 'conf', 'wsgi.py'), 'w') as f:
        f.write(wsgi_str)
        f.close()
    with open(os.path.join(args.name, 'requirements.txt'), 'w') as f:
        f.close()
    with open(os.path.join(args.name, '%s.py'%(args.name,)), 'w') as f:
        f.close()
    print '%s has been created!' % (args.name,)


def gen_scaff(args):
    if not in_yap_proj():
        print 'NOT in a YAPWAF project... Exit!'
        exit()
    if os.path.exists(os.path.join('app', 'views', args.name)):
        print 'Controller already exists, exiting!'
        exit()
    with open(os.path.join('app', 'controllers', '%s.py'%(args.name,)), 'w') as f:
        f.close()
    with open(os.path.join('app', 'models', '%s.py'%(args.name,)), 'w') as f:
        f.close()
    os.mkdir(os.path.join('app', 'views', args.name))
    print 'Scaffold for %s created!' % (args.name,)


def run_servd(args):
   command = 'gunicorn -c ./conf/wsgi.py %s:app' % (args.name,)
   print command
   os.system(command)


def get_args():
    parser = argparse.ArgumentParser(
            description='Perform tasks associated with YAPWAF web framework.',
            epilog='Pass any of the options above. Keep in mind that some \
                    only work within an existing YAPWAF project.')
    subparsers = parser.add_subparsers(title='Subcommands',
            description='Project management tasks.')

    gen_proj = subparsers.add_parser('gen:project',
            help='Generate a project structure with the name provided \
                    in the current directory')
    gen_proj.add_argument('name', help='The name of the project. \
            A directory of this name will be created in the current directory')
    gen_proj.set_defaults(func=gen_project)

    gen_scaffold = subparsers.add_parser('gen:scaffold',
            help='Generate a new scaffold with the name provided.')
    gen_scaffold.add_argument('name', help='The name of the scaffold.')
    gen_scaffold.set_defaults(func=gen_scaff)

    run_serv = subparsers.add_parser('run', help='Start the server')
    run_serv.add_argument('name', help='Name of application to run')
    run_serv.set_defaults(func=run_servd)
    return parser.parse_args()


def main():
    args = get_args()
    args.func(args)


if __name__ == '__main__':
    main()
